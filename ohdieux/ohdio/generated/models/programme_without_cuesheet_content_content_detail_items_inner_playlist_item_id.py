# coding: utf-8

"""
    ohdieux-api-spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from ohdieux.ohdio.generated.models.programme_without_cuesheet_content_content_detail_items_inner_playlist_item_id_global_id2 import ProgrammeWithoutCuesheetContentContentDetailItemsInnerPlaylistItemIdGlobalId2
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProgrammeWithoutCuesheetContentContentDetailItemsInnerPlaylistItemId(BaseModel):
    """
    ProgrammeWithoutCuesheetContentContentDetailItemsInnerPlaylistItemId
    """ # noqa: E501
    title: StrictStr
    media_id: Optional[StrictStr] = Field(default=None, alias="mediaId")
    has_transcription: StrictBool = Field(alias="hasTranscription")
    global_id2: ProgrammeWithoutCuesheetContentContentDetailItemsInnerPlaylistItemIdGlobalId2 = Field(alias="globalId2")
    global_id: StrictStr = Field(alias="globalId")
    __properties: ClassVar[List[str]] = ["title", "mediaId", "hasTranscription", "globalId2", "globalId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProgrammeWithoutCuesheetContentContentDetailItemsInnerPlaylistItemId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of global_id2
        if self.global_id2:
            _dict['globalId2'] = self.global_id2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProgrammeWithoutCuesheetContentContentDetailItemsInnerPlaylistItemId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "mediaId": obj.get("mediaId"),
            "hasTranscription": obj.get("hasTranscription"),
            "globalId2": ProgrammeWithoutCuesheetContentContentDetailItemsInnerPlaylistItemIdGlobalId2.from_dict(obj.get("globalId2")) if obj.get("globalId2") is not None else None,
            "globalId": obj.get("globalId")
        })
        return _obj


