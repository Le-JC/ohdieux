# https://www.playframework.com/documentation/latest/Configuration

http.port=9000
http.port=${?PORT}

http.address="0.0.0.0"
http.address=${?HTTP_ADDRESS}


# db.default.driver=org.postgresql.Driver
# db.default.url="jdbc:postgresql://127.0.0.1/ohdieux"
# db.default.username=postgres
# db.default.password="password"

base_data_dir=""
base_data_dir=${?DATA_DIR}

public_url=""
public_url=${?PUBLIC_URL}

db.default.driver=org.sqlite.JDBC
db.default.url="jdbc:sqlite:"${base_data_dir}"ohdieux.db"

db.default.driver=${?JDBC_DRIVER}
db.default.url=${?JDBC_URL}
db.default.username=${?JDBC_USERNAME}
db.default.password=${?JDBC_PASSWORD}


# db connections = ((physical_core_count * 2) + effective_spindle_count)
fixedConnectionPool = 9
fixedConnectionPool=${?DATABASE_CONNECTION_POOL_SIZE}

database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

play.filters.disabled += "play.filters.csrf.CSRFFilter"
play.filters.disabled += "play.filters.hosts.AllowedHostsFilter"
play.http.errorHandler = "ca.ligature.ohdieux.infrastructure.DefaultErrorHandler"
play.assets.cache."/"="max-age=86400"

rc {
   base_url = "https://services.radio-canada.ca"
   base_url = ${?RC_BASE_URL}
   user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
   user_agent = ${?USER_AGENT}
}

archive {
  archive_media = false
  archive_media = ${?ARCHIVE_MEDIA}
  base_dir = ${base_data_dir}"archive"
  base_dir = ${?ARCHIVE_BASEDIR}
  temp_dir = "/tmp/ohdieux"
  temp_dir = ${?ARCHIVE_TEMP_DIR}
  

  # Programme IDs for which to *never* archive audio files. Manifests
  # will still be created, but will link to upstream media files, even
  # if archive_media is enabled.
  programme_blacklist = []
  programme_blacklist = ${?ARCHIVE_PROGRAMME_BLACKLIST}
}

scraper {
  # Set to 0 to disable
  refresh_interval = 3600
  refresh_interval = ${?SCRAPER_REFRESH_INTERVAL}

  # Whether to automatically start tracking every queried manifest
  auto_add_programmes = true
  auto_add_programmes = ${?SCRAPER_AUTO_ADD_PROGRAMME}
}

manifest {
  serve_images = false
  serve_images = ${?MANIFEST_SERVE_IMAGES}

  image_archive_base_url = ${public_url}"/media/images/"
  image_archive_base_url = ${?MANIFEST_IMAGE_BASE_URL}

  serve_media = false
  serve_media = ${?MANIFEST_SERVE_MEDIA}
  media_archive_base_url = ${public_url}"/media/audio/"
  media_archive_base_url = ${?MANIFEST_AUDIO_BASE_URL}
}